import numpy as np
import tensorflow as tf
import tensorflow.keras as keras
from tensorflow.keras.optimizers import Adam
from learn import Replaybuffer
from network import ActorNetwork,CriticNetwork

class Agent:
    def __init__(self,input_dims,max_size=10000,env=None):
        self.gamma = 0.99
        self.tau = 0.005
        self.n_actions = 2
        
        self.memory = Replaybuffer(max_size,input_dims,self.n_actions)
        self.batch_size = 64
        self.noisse = 0.1
        self.max_action = env.action_space.high[0]
        self.min_action = env.action_space.low[0]
        self.learning_rate_actor = 0.001
        self.learning_rate_critic = 0.002
        
        self.actor = ActorNetwork(n_actions=self.n_actions,name='actor')
        self.critic = CriticNetwork(n_actions=self.n_actions,name='critic')
        self.target_actor = ActorNetwork(n_actions=self.n_actions,name='target_actor')
        self.target_critic = CriticNetwork(n_actions=self.n_actions,name='target_critic')
        
        self.actor.complie(optimizer = Adam(learning_rate = self.learning_rate_actor))
        self.critic.compile(optimizer = Adam(learning_rate = self.learning_rate_critic))
        self.target_actor.complie(optimizer = Adam(learning_rate = self.learning_rate_actor))
        self.target_critic.complie(optimizer = Adam(learning_rate = self.learning_rate_critic))
        
        self.update_network_parameters(tau=1)
        
    def update_network_parameter(self,tau=None):
        if tau is None:
            tau = self.tau
        weights = []
        targets = self.target_actor_weights
        for i , weight in enumerate(self.actor.weights):
            weights.append(weight*tau + targets[i]*(1-tau))
        self.target_critic.set_weights(weights)
    
    def remember(self,state,action,reward,new_state,done):
        self.memory.store_transition(state,action,reward,new_state,done)
        
    def save_models(self):
        print('saving models.....')
        self.actor.save_weights(self.actor.checkpoint_file)
        self.critic.save_weights(self.critic.checkpoint_file)
        self.target_actor.save_weights(self.target_actor.checkpoint_file)
        self.target_critic.save_weights(self.target_critic.checkpoint_file)
        
    def action(self,observation,evaluate=False):
          state = tf.convert_to_tensor([observation],dtype=tf.float32)
          actions = self.actor(state)
          if not evaluate:
              actions += tf.random.normal(shape=[self.n_action],
                                          mean=0.0,stddev=self.noise)
          actions = tf.clip_by_value(actions,self.min_size,self.max_action)
          
          return  actions[0]    
      
    def learn(self):
        if self.memory.mem_cntr < self.batch_size:
            return
        
        state,action,reward,new_state,donr = self.memory.sample_buffer(self.batch_size)
        state = tf.convert_to_tensor(state,dtype=tf.float32)
        states_ = tf.convert_to_tensor(new_state,dtype=tf.float32)
        actions = tf.convert_to_tensor(action,dtype=tf.float32)
        rewards = tf.convert_to_tensor(reward,dtype=tf.float32)
        
        with tf.GradientTape() as tape:       
              target_actions = self.target_actor(states_)
              critic_value = tf.squeeze(self.target_critic(states_,target_actions,1))
              critic_value= tf.squeeze(self.critic(state,actions),1)
              target = reward + self.gamma*critic_value*(1-done)
              critic_loss = keras.losses.MSE(target,critic_value)
              
        critic_network_gradient = tape.gradient(critic_loss,
                                                self.critic_trainable_variables)
        self.critic.optimizer.apply_gradients(zip(
            critic_network_gradient,self.critic_trainable_variable))
        
        with tf.GradientTape() as tape:
            new_policy_actions = self.actor(states)
            actor_loss = -self.critoc(states,new_policy_actions)
            actor_loss = tf.math.reduce_mean(actor_loss) 
            
        actor_network_gradient = tape.gradient(actor_loss,self.actor_trainable_variables)
        self.actor.optimizer.apply_gradients(zip(actor_network_gradient,self.actor_trainable_variables))
        
        self.update_network_parameter() 
        
